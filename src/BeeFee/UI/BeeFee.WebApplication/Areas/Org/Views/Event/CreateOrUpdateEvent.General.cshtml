@using BeeFee.WebApplication.Areas.Org.Models
@using BeeFee.WebApplication.Infrastructure
@using SharpFuncExt
@model BeeFee.WebApplication.Areas.Org.Models.CreateOrUpdateEventGeneralStepModel
@{
    Layout = "~/Areas/Org/Views/Event/CreateOrUpdateEventLayout.cshtml";
}
@section generalsection
    {
    <form asp-action="EventGeneralSettingsStep" asp-controller="Event" asp-route-companyId="@Model.CompanyId" method="post" class="form-horizontal" enctype="multipart/form-data" id="event-form">
        @Html.ValidationSummary(false)
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.CompanyId)
        @Html.HiddenFor(m => m.Version)
        @Html.ValidationMessageFor(m => m.Name, null, new { @class = "text-danger" })
        <div class="create--field is-big">
            @Html.TextBoxFor(m => m.Name, new { @class = "create--field-i", placeholder = "Название события" })
        </div>
        @Html.ValidationMessageFor(m => m.Label, null, new { @class = "text-danger" })
        <div class="create--field">
            @Html.TextBoxFor(m => m.Label, new { @class = "create--field-i", placeholder = "Краткое описание события" })
        </div>
        @Html.ValidationMessageFor(m => m.Url, null, new { @class = "text-danger" })
        <div class="create--field">
            @Html.TextBoxFor(m => m.Url, new { @class = "create--field-i", placeholder = "Url события" })
        </div>
        @Html.ValidationMessageFor(m => m.Cover, null, new { @class = "text-danger" })
        <div class="create--file">
            @if (!String.IsNullOrEmpty(Model.Cover))
            {
                <img style="display: block; margin-bottom: 15px;" src="@Url.GetImageUrl(Model.CompanyUrl, Model.Url, Model.Cover, 368, 190)" />
            }
            @Html.HiddenFor(m => m.Cover)
            @if (Model.IsNew)
            {
                <input class="create--file-i" type="file" name="File" />
                @Html.ValidationMessage("File")
            }
            else
            {
                <input class="create--file-i" type="file" id="File" data-eventurl="@Model.Url" data-companyurl="@Model.CompanyUrl" data-imageserverurl="@(BeeFeeWebAppSettings.Instance.ImagesUrl)" />
            }
            <div class="create--file-b">Загрузить изображение</div>
        </div>
        @Html.ValidationMessageFor(m => m.StartDateTime, null, new { @class = "text-danger" })
        @Html.ValidationMessageFor(m => m.FinishDateTime, null, new { @class = "text-danger" })
        <div class="create--field with-icon is-small">
            <i class="icon-date"></i>
            <div class="create--field-di">
                <div class="create--field-dl">Начало</div>
                <input type="text" data-range="start" name="@Html.NameFor(m => m.StartDateTime)" value="@Model.StartDateTime.ToString("u")" /><span class="is-s1">дд/мм/гггг</span><span class="is-s2">чч:мм</span>
            </div>
            <div class="create--field-di">
                <div class="create--field-dl">Конец</div>
                <input type="text" data-range="end" name="@Html.NameFor(m => m.FinishDateTime)" value="@Model.FinishDateTime.ToString("u")" /><span class="is-s1">дд/мм/гггг</span><span class="is-s2">чч:мм</span>
            </div>
        </div>
        @Html.ValidationMessageFor(m => m.City, null, new { @class = "text-danger" })
        <div class="create--field with-icon is-small">
            <i class="icon-marker"></i>
            @Html.TextBoxFor(m => m.City, new { @class = "create--field-i", placeholder = "Город" })
        </div>
        @Html.ValidationMessageFor(m => m.Address, null, new { @class = "text-danger" })
        <div class="create--field with-icon is-small">
            <i class="icon-marker"></i>
            @Html.TextBoxFor(m => m.Address, new { @class = "create--field-i", placeholder = "Адрес события" })
            @*<div class="create--map">
                    <div class="create--map-in"></div>
                </div>*@
        </div>
        @Html.ValidationMessageFor(m => m.CategoryId, null, new { @class = "text-danger" })
        <div class="create--field with-icon">
            <i class="icon-type"></i>
            <div class="select is-simple">
                @Html.HiddenFor(m => m.CategoryId, new { @class = "select_hidden" })
                <div class="select_in">
                    <div class="select_title">@Html.Raw(Model.Categories.Any(x => x.Selected) ? Model.Categories.Where(x => x.Selected).Select(x => x.Text).FirstOrDefault() : "<span class=\"select_placeholder\">Категория</span>")</div>
                </div>
                <ul class="select_list">
                    @foreach (var category in Model.Categories)
                    {
                        <li data-value="@category.Value">@category.Text</li>
                    }
                </ul>
            </div>
        </div>
        @*<div class="create--field with-icon is-sm">
                <i class="icon-ruble"></i>
                <div class="create--field-l is-s1">Стоимость билетов от</div>
                <div class="create--field-b is-s1">
                    <input class="create--field-i" type="text">
                </div>
                <div class="create--field-l is-s2">до</div>
                <div class="create--field-b is-s2">
                    <input class="create--field-i" type="text">
                </div>
            </div>*@
        @Html.ValidationMessageFor(m => m.Email, null, new { @class = "text-danger" })
        <div class="create--field with-icon is-small">
            <i class="icon-mail"></i>
            @Html.TextBoxFor(m => m.Email, new { @class = "create--field-i", placeholder = "Почта для обратной связи" })
        </div>
    </form>
}